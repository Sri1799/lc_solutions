/*
let N be the number of tasks, M is number of workers
  tc - O(N + M*logN)
  sc - O(N)
*/

using pii = pair<int,int>;

class Solution {

    int get_max_profit(int worker, vector<pii> &vp)
    {
        int l = 0, r = vp.size() - 1, best_profit = 0;
        while (l<=r)
        {
            int mid = l + (r-l)/2;
            if (vp[mid].first > worker)
            {
                r = mid - 1;
            }
            else
            {
                best_profit = vp[mid].second;
                l = mid + 1;
            }
        }

        return best_profit;
    }

public:
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {
        /*
        max profit so far 
            47 - 66
            57 - 99
            85 - 99

        - binary search
            m*logn
        */
        int n = profit.size();
        vector<pii> vp;
        for (int i=0;i<n;i++)
        {
            vp.push_back({difficulty[i], profit[i]});
        }

        sort(vp.begin(), vp.end());

        for (int i=1;i<n;i++)
        {
            vp[i].second = max(vp[i].second, vp[i-1].second);
        }

        int ans = 0;
        for (auto &m:worker)
        {
            ans += get_max_profit(m, vp);
        }

        return ans;
    }
};
