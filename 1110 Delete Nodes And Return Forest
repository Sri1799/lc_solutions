/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    unordered_set<int> tds;

    unordered_map<TreeNode *, TreeNode *> parent;
    unordered_map<TreeNode *, vector<TreeNode *>> children; // 0 is left, 1 is right
    vector<TreeNode *> nodes;

    void parse(TreeNode *node, TreeNode *par = nullptr)
    {
        if (!node)
            return;

        nodes.push_back(node);
        parent[node] = par;
        children[node] = {node->left, node->right};

        parse(node->left, node);
        parse(node->right, node);
    }

public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        /*
        - delete left/right ptr of its parent (if parent exists)
            - req to track parent node and whether node is left/right child
        - remove parent link for its child nodes (if any)
            - req to track child nodes for every node
        - maintain list of nodes to delete
            - for every node, follow the above 2 steps
        */
        tds.insert(to_delete.begin(), to_delete.end());

        parse(root);

        vector<TreeNode *> ans;

        for (auto &node:nodes)
        {
            if (tds.find(node->val) == tds.end()) // dont delete
                continue;

            TreeNode *parNode = parent[node];
            if (parNode)
            {
                if (parNode->left == node)
                    parNode->left = nullptr;
                else
                    parNode->right = nullptr;
                // par[node] = nullptr;
            }

            TreeNode *left = children[node][0];
            if (left)
                parent[left] = nullptr;
            
            TreeNode *rght = children[node][1];
            if (rght)
                parent[rght] = nullptr;
        }

        for (auto &node:nodes)
        {
            if (tds.find(node->val) != tds.end()) // yes delete
                continue;

            if (parent[node] == nullptr)
                ans.push_back(node);
        }

        return ans;
    }
    /*
    tc - O(N)
    sc - O(N)
    */
};
