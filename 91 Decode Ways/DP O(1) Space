APPROACH
1. This is an optimization. When we know the DP only depends on the DP of the last 2 elements - we can store those in vars, instead of a DP vector

COMPLEXITIES
1. TC - O(N)
2. SC - O(1)

class Solution {
public:

    int numDecodings(string s) {
        // let dp[v] = the number of ways to decode string [0..v]
        // dp[v] = dp[v-1] + dp[v-2];

        int n = s.length();

        auto option_1 = 0;
        auto option_2 = 0;
        
        for (int i=0;i<n;i++)
        {
            auto currSelection = 0;

            // choose 1
            if (s[i] > '0')
            {
                currSelection += (i > 0 ? option_1 : 1);
            }

            // choose 2
            if (i >= 1)
            {
                auto nc1 = s[i-1] - '0';
                auto nc2 = s[i] - '0';

                auto notAllowed = (nc1 == 2 && nc2 > 6) || nc1 > 2 || nc1 == 0;

                if (!notAllowed)
                {
                    currSelection += (i >= 2 ? option_2 : 1);
                }
            }

            option_2 = option_1;
            option_1 = currSelection;
        }

        return option_1;
    }
};
