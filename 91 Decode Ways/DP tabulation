APPROACH
1. DP, tabulation; dp[idx] = no. of ways to decode string [0...idx]

COMPLEXITIES
// TC - O(N)
// SC - O(N)

class Solution {
public:

    int numDecodings(string s) {
        // let dp[v] = the number of ways to decode string [0..v]
        // dp[v] = dp[v-1] + dp[v-2];

        int n = s.length();

        vector<int> dp(n, 0);

        for (int i=0;i<n;i++)
        {
            // choose 1
            if (s[i] > '0')
            {
                dp[i] += (i > 0 ? dp[i-1] : 1);
            }

            // choose 2
            if (i > 0)
            {
                auto nc1 = s[i-1] - '0';
                auto nc2 = s[i] - '0';

                auto notAllowed = (nc1 == 2 && nc2 > 6) || nc1 > 2 || nc1 == 0;

                if (!notAllowed)
                {
                    dp[i] += (i >= 2 ? dp[i-2] : 1);
                }
            }
        }

        return dp[n-1];
    }
};
