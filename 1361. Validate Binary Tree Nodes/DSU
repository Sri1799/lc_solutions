APPROACH
1. DSU solution

COMPLEXITIES
1. TC - O(N)
2. SC - O(N)

class Solution {
public:

    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        UF *uf = new UF(n);

        for (int i=0;i<n;i++)
        {
            uf->make_set(i);
        }

        for (int i=0;i<n;i++)
        {
            if (leftChild[i] != -1)
            {
                if (!uf->join_set(i, leftChild[i]))
                    return false;
            }

            if (rightChild[i] != -1)
            {
                if (!uf->join_set(i, rightChild[i]))
                    return false;
            } 
        }

        return uf->components == 1;
    }

    class UF
    {
        private:
            vector<int> parent;
            vector<int> size;
            vector<int> rank;

        public:
            int components = 0;
            
            UF(int n)
            {
                parent.assign(n, -1);
                size.assign(n, 0);
                rank.assign(n, -1);
            }

            void make_set(int v)
            {
                parent[v] = v;
                size[v] = 1;
                rank[v] = 0;

                components++;
            }

            int find_set(int v)
            {
                if (parent[v] == v)
                    return v;

                return parent[v] = find_set(parent[v]);
            }

            bool join_set(int v, int u)
            {
                auto rootV = find_set(v);
                auto rootU = find_set(u);

                // How to know if a node is already part of a connected component with other nodes => parent[node] != node
                // in that case, if join_set is called, we should return false as it would mean the node has > 1 parent
                // That is why we should also now go for this rank optimization, because then, the roots will get mixed up
                // and it would look a given node 'x' has a parent already, when in fact it doesnt. THE NODE 'x' is the PARENT.
                // e.g. testcase :: 5, [1, 2, -1, 0, 3], [-1, -1, -1, -1, -1]
                if (rootV != rootU && rootU == u)
                {
                    components--;
                    // if (rank[rootV] < rank[rootU])
                    //    swap(rootV, rootU);

                    parent[rootU] = rootV;

                    size[rootV] += size[rootU];

                    if (rank[rootV] == rank[rootU])
                        rank[rootV]++;

                    return true;
                }
                else
                {
                    return false;
                }
            }
    };
};
