APPROACH
1. The moment a question asks max/min based on certain decisions - it is DP
2. Problem has overlapping subprobs (we have to keep repeating computations), and optimal substructure (sln of the prob is a function of the sln of the subproblems)

COMPLEXITIES
1. TC - O(N)
2. SC - O(1)

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size(), ans = nums[0];
        int option_1 = 0, option_2 = 0, prev = nums[0], currVal = 0;
        for (int i=1;i<n;i++)
        {
            currVal = nums[i] + max(option_1, option_2);

            if (i >= 2)
            {
                option_1 = option_2;
            }

            if (i >= 1)
            {
                option_2 = prev;
            }

            ans = max(ans, currVal);

            prev = currVal;
        }

        return ans;
    }
};
