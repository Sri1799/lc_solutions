// 128. Longest Consecutive Sequence
// USING DSU approach. 2 vals will be in same group/tree if they are consecutive

// TC - O(N) ==> TC of join is O(1), unordered_map lookup and insert is O(1), initialization are O(1). The worst case is in joining all elements of the nums array as they are all consecutive, in this case TC is O(1) * N = O(N)
// SC - O(N) ==> For the parent, rank and size vectors in the DSU class and also for the unordered_map used to store val-to-index.

class Solution {
public:

    int longestConsecutive(vector<int>& nums) {

        int n = nums.size();

        if (n == 0)
            return n;

        UnionFind *uf = new UnionFind(n);

        unordered_map<int,int> valToIndex;

        for (int i=0;i<n;i++)
        {
            auto num = nums[i];

            if (valToIndex.find(num) != valToIndex.end())
            {
                continue;
            }

            if (valToIndex.find(num-1) != valToIndex.end())
                uf->join(i, valToIndex[num-1]);

            if (valToIndex.find(num+1) != valToIndex.end())
                uf->join(i, valToIndex[num+1]);
            
            valToIndex[num] = i;
        }

        return uf->getMaxSizedSet();
    }

    class UnionFind
    {
        private:
        vector<int> parent;
        vector<int> size;
        vector<int> rank;

        public:
        UnionFind(int n)
        {
            parent.assign(n, 0);

            for (int i=0;i<n;i++)
                parent[i] = i;

            size.assign(n, 1);
            rank.assign(n, 0);
        }

        int findRoot(int x)
        {
            if (parent[x] == x)
                return x;

            return parent[x] = findRoot(parent[x]);
        }

        void join(int x, int y)
        {
            int rootX = findRoot(x);
            int rootY = findRoot(y);

            if (rootX != rootY)
            {
                if (rank[rootX] < rank[rootY])
                    swap(rootX, rootY);

                parent[rootY] = rootX;
                size[rootX] += size[rootY];

                if (rank[rootX] == rank[rootY])
                    rank[rootX]++;
            }
        }

        int getMaxSizedSet()
        {
            return *max_element(size.begin(), size.end());
        }
    };
};
