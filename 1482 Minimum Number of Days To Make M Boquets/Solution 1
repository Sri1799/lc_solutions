/*
  let N be number of flowers
  tc - O(N + log10^9 * N) => O(N + k*N) => O(k*N) where k>25
  sc - O(1)
*/

class Solution {

    bool is_possible(vector<int> &bloomDay, int m, int k, int day)
    {
        int m_cnt = 0;

        for (int i=0;i<bloomDay.size();)
        {
            int k_cnt = 0;
            while (i<bloomDay.size() && k_cnt < k)
            {
                if (bloomDay[i++]>day)
                {
                    break;
                }

                k_cnt++;
            }

            if (k_cnt == k)
            {
                m_cnt++;
                if (m_cnt == m)
                    break;
            }
        }

        return m_cnt == m;
    }

public:
    int minDays(vector<int>& bloomDay, int m, int k) {
        /*
        total req = m * k
        1 2 3 10 10
        return ans[total_req - 1]

        total req = 3 * 2 = 6
        1 2 3 10 10
        
        x x x x _ x x
        */

        int n = bloomDay.size();

        if (1ll*m*k > n)
            return -1;

        int maxDay = *max_element(bloomDay.begin(), bloomDay.end());
        int l = 1, r = maxDay, ans = -1;

        // if it can be made in x days, it can also be made in x+1 day => B.S.
        while (l<=r)
        {
            int day = l + (r-l)/2;
            if (is_possible(bloomDay, m, k, day))
            {
                ans = day;
                r = day - 1;
            }
            else
            {
                l = day + 1;
            }
        }

        return ans;
    }
};
