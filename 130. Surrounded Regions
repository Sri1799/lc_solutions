// 130. Surrounded Regions
// Solved using DFS
// TC - O(N) ==> N is the number of cells in the matrix (i.e. m x n). DFS is O(V + E), here E = 4*V === ~O(V)
// SC - O(N) ==> N is the number of cells in the matric (i.e. m x n). Worst case is when all N cells are O in which case everyone should be traversed --> stack size O(N)

class Solution {
public:

    vector<int> ud = {0, -1, 0, 1};
    vector<int> lr = {-1, 0, 1, 0};

    void dfs(vector<vector<char>>& board, int x, int y)
    {
        int m = board.size(), n = board[0].size();

        board[x][y] = 'P';
        
        for (int i=0;i<4;i++)
        {
            auto newX = x + ud[i];
            auto newY = y + lr[i];

            if (newX >= 0 && newX < m && newY >= 0 && newY < n && board[newX][newY] == 'O')
            {
                dfs(board, newX, newY);
            }
        }
    }

    void solve(vector<vector<char>>& board) {
        
        int m = board.size(), n = board[0].size();

        for (int i=0;i<m;i++)
        {
            if (board[i][0] == 'O')
            {
                dfs(board, i, 0);
            }

            if (board[i][n-1] == 'O')
            {
                dfs(board, i, n-1);
            }
        }

        for (int j=0;j<n;j++)
        {
            if (board[0][j] == 'O')
            {
                dfs(board, 0, j);
            }

            if (board[m-1][j] == 'O')
            {
                dfs(board, m-1, j);
            }
        }

        for (int i=0;i<m;i++)
        {
            for (int j=0;j<n;j++)
            {
                if (board[i][j] == 'P')
                    board[i][j] = 'O';
                else if (board[i][j] == 'O')
                    board[i][j] = 'X';
            }
        }
    }
};
