/*
    let C be number of commands, O be number of obstacles
    tc - O(O + OlogO + C*logO)
    sc - O(O)
*/

class Solution {

    int getNext(int x, vector<int> &obs, int steps, int dir)
    {
        int px = x, gx = x + (dir == 1 ? 1 : -1)*steps;
        int l = 0, r = obs.size() - 1, ans = gx;
        
        if (!dir) // going negative direction, select max obstacle
        {
            while (l<=r)
            {
                int mid = l + (r-l)/2;
                if (obs[mid]>=px)
                {
                    r = mid - 1;
                }
                else if (obs[mid]<gx)
                {
                    l = mid + 1;
                }
                else
                {
                    ans = obs[mid] + 1;
                    l = mid + 1;
                }
            }
        }
        else // going positive direction, select min obstacle
        {
            while (l<=r)
            {
                int mid = l + (r-l)/2;
                if (obs[mid]<=px)
                {
                    l = mid + 1;
                }
                else if (obs[mid]>gx)
                {
                    r = mid - 1;
                }
                else
                {
                    ans = obs[mid] - 1;
                    r = mid - 1;
                }
            }
        }

        return ans;
    }

public:
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {
        int x = 0, y = 0, dir = 0, maxD = 0; // 0, 1, 2, 3
        unordered_map<int,vector<int>> obmap_x, obmap_y;
        for (auto &obstacle:obstacles)
        {
            obmap_x[obstacle[0]].push_back(obstacle[1]);
            obmap_y[obstacle[1]].push_back(obstacle[0]);
        }

        for (auto &obv:obmap_x)
        {
            sort(begin(obv.second), end(obv.second));
        }

        for (auto &obv:obmap_y)
        {
            sort(begin(obv.second), end(obv.second));
        }

        for (auto &command:commands)
        {
            if (command < 0)
            {
                if (command == -1)
                    dir = (dir + 1)%4;
                else
                    dir = (dir + 3)%4;
                continue;
            }

            if (dir == 0) // x is moving, use obmap_y, +ve direction
            {
                y = getNext(y, obmap_x[x], command, 1);
            }
            else if (dir == 1) // y is moving, use obmap_x, +ve direction
            {
                x = getNext(x, obmap_y[y], command, 1);
            }
            else if (dir == 2)
            {
                y = getNext(y, obmap_x[x], command, 0);
            }
            else
            {
                x = getNext(x, obmap_y[y], command, 0);
            }

            cout<<x<<" "<<y<<endl;
            maxD = max(maxD, x*x + y*y);
        }

        return maxD;
    }
};
