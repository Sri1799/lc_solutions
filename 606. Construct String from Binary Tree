// 606. Construct String from Binary Tree

// N is number of nodes in the tree
// TC - O(N) : need to iterate through all nodes of the tree
// SC - O(N) : max space required is if this is a skewed tree where depth is N - so call stack will have N recursive calls

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
    
    
public:
    string tree2str(TreeNode* root) {
        
        string ans = "";
        
        ans += to_string(root->val);
        
        if (root->left){
            ans += '(';
            ans += tree2str(root->left);
            ans += ')';
        }
        else if (root->right)
        {
            ans += '(';
            ans += ')';
        }
        
        if (root->right){
            ans += '(';
            ans += tree2str(root->right);
            ans += ')';
        }
        
        return ans;
    }
};
